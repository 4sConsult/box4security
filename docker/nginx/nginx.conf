upstream webapp {
    server web:5000;
}
upstream kibanacontainer {
  server kibana:5601;
}
upstream docs {
  server wiki:80;
}

server {
    listen 80 default_server;

    server_name _;

    return 301 https://$host$request_uri;
}

server {
  listen 443 ssl;
  server_name _;
  ssl_certificate /etc/nginx/certs/box4security.cert.pem;
  ssl_certificate_key /etc/nginx/certs/box4security.key.pem;
  location / {
    proxy_pass http://webapp;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_redirect off;
  }
  location = /favicon.ico {
    rewrite ^/favicon.ico$ /static/favicon.ico;
  }
  location /static/ {
        alias /home/app/web/source/static/;
    }
  location = /docs/ {
    auth_request /auth;
    auth_request_set $auth_username $upstream_http_x_auth_username;
    proxy_set_header X-Auth-Username $auth_username;
    # Require WebApp Authentication
    proxy_pass http://webapp/docs;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_redirect off;
    }
  location /wiki/ {
    auth_request /auth;
    auth_request_set $auth_username $upstream_http_x_auth_username;
    proxy_set_header X-Auth-Username $auth_username;
    # Require WebApp Authentication
    proxy_pass http://docs;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_redirect off;
    location ~ /wiki/gollum/(edit|create|delete|rename)/(BOX4security|Wazuh) {
      # Deny editing, deleting and creating official pages.
      return 403;
    }

  }
  location /kibana/ {
    auth_request /auth;
    # Require WebApp Authentication
    valid_referers 4sconsult.de;
    # Require Valid Referer: The Host: variable
    # This is to limit direct access a bit,
    # but still allow iframing.
    set $temp "$host:$http_referer";
  	if ($temp ~* "^(.*):https?://\1") {
      	set $invalid_referer "0";
  	}
  	if ($invalid_referer) {
      	return 403;
  	}
    proxy_pass http://kibanacontainer;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_redirect off;
  }
  location = /auth {
    # Login Auth Provider
    proxy_pass http://webapp/auth;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_set_header X-Original-URI $request_uri;
  }
  error_page 401 = @error401;
  # If the user is not logged in, redirect them to the WebApp's Login Page
  location @error401 {
    return 302 https://$http_host/user/sign-in?next=/$request_uri;
  }
}
