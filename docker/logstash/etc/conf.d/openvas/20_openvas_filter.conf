# Author: Austin Taylor and Justin Henderson
# Email: austin@hasecuritysolutions.com
# Last Update: 03/04/2018
# Version 0.3
# Description: Take in openvas web scan reports from vulnWhisperer and pumps into logstash

#input {
 # file {
 #   path => "/var/lib/logstash/openvas/*.json"
 #   type => json
 #   codec => json
 #   sincedb_path => "/var/lib/logstash/openvas_sincedb"
 #   start_position => "beginning"
 #   tags => [ "openvas" ]
 #   max_open_files => "1"
 #   mode => "read"
 # }


filter {
#  if "openvas" in [tags] { #not needed in filebeat
    mutate {
      replace => [ "message", "%{message}" ]
      gsub => [
        "message", "\|\|\|", " ",
        "message", "\t\t", " ",
        "message", "    ", " ",
        "message", "   ", " ",
        "message", "  ", " ",
        "message", "nan", " ",
        "message",'\n',''
      ]
    }
	grok {
        match => { "[log][file][path]" => "openvas_scan_%{INT:last_updated}_%{DATA:scan_id}.json$" }
        tag_on_failure => [path_date_parsing_failure]
    }
    # Backup timestamp
  mutate {
    copy => {"@timestamp" => "_timestamp"}
  }
   date {
	    match =>["last_updated","UNIX"]
	    target => "report_date"
        tag_on_failure => [last_update_parsing_failure]
    }
   date {
      match => [ "last_updated", "UNIX" ]
      target => "@timestamp"
    }
  mutate {
    copy => {"@timestamp" => "timestamp"}

  }
    # if no timestamp, use the backup
  if !["@timestamp"] {
    mutate {
      rename => {"_timestamp" => "@timestamp"}
    }
  }
# Quickfix for filebeat
   mutate {
    remove_field => [ "host" ]
  }

    mutate {
      add_field => { "risk_score" => "%{cvss}" }
    }
    if [risk] == "1" {
      mutate { add_field => { "risk_number" => 1 }}
      mutate { replace => { "risk" => "Informativ" }}
    }
    if [risk] == "2" {
      mutate { add_field => { "risk_number" => 2 }}
      mutate { replace => { "risk" => "Niedrig" }}
    }
    if [risk] == "3" {
      mutate { add_field => { "risk_number" => 3 }}
      mutate { replace => { "risk" => "Mittel" }}
    }
    if [risk] == "4" {
      mutate { add_field => { "risk_number" => 4 }}
      mutate { replace => { "risk" => "Hoch" }}
    }
    if [risk] == "5" {
      mutate { add_field => { "risk_number" => 5 }}
      mutate { replace => { "risk" => "Sehr hoch" }}
    }

    mutate {
      remove_field => "message"
    }

    if [first_time_detected] {
      date {
        match => [ "first_time_detected", "dd MMM yyyy HH:mma 'GMT'ZZ", "dd MMM yyyy HH:mma 'GMT'" ]
        target => "first_time_detected"
      }
    }
    if [first_time_tested] {
      date {
        match => [ "first_time_tested", "dd MMM yyyy HH:mma 'GMT'ZZ", "dd MMM yyyy HH:mma 'GMT'" ]
        target => "first_time_tested"
      }
    }
    if [last_time_detected] {
      date {
        match => [ "last_time_detected", "dd MMM yyyy HH:mma 'GMT'ZZ", "dd MMM yyyy HH:mma 'GMT'" ]
        target => "last_time_detected"
      }
    }
    if [last_time_tested] {
      date {
        match => [ "last_time_tested", "dd MMM yyyy HH:mma 'GMT'ZZ", "dd MMM yyyy HH:mma 'GMT'" ]
        target => "last_time_tested"
      }
    }
    mutate {
      convert => { "plugin_id" => "integer"}
      convert => { "id" => "integer"}
      convert => { "risk_number" => "integer"}
      convert => { "risk_score" => "float"}
      convert => { "total_times_detected" => "integer"}
      convert => { "cvss_temporal" => "float"}
      convert => { "cvss" => "float"}
      remove_field => ["last_updated"]
    }
    if [risk_score] == 0 or [risk_score] < 0.1 {
      mutate {
        add_field => { "risk_score_name" => "Informativ" }
      }
    }
    if [risk_score] > 0 and [risk_score] < 4.0 {
      mutate {
        add_field => { "risk_score_name" => "Niedrig" }
      }
    }
    if [risk_score] >= 4.0 and [risk_score] < 7.0 {
      mutate {
        add_field => { "risk_score_name" => "Mittel" }
      }
    }
    if [risk_score] >= 7.0 and [risk_score] < 9.0 {
      mutate {
        add_field => { "risk_score_name" => "Hoch" }
      }
    }
    if [risk_score] >= 9.0 {
      mutate {
        add_field => { "risk_score_name" => "Sehr hoch" }
      }
    }


#COMMON SCHEMA
  mutate {
      rename => { "asset" => "[client][ip]" }
      copy  => { "[client][ip]" => "[client][domain]" }
    }
   #Lege einzigartige Schwachstelle an
    mutate {
        add_field => { "uniqueVul" => "%{nvt_oid}%{[client][ip]}%{port}" }
	#	method => "MD5"
       }
	fingerprint {
	   method => "MD5"
	   source => "uniqueVul"
	   }
	 mutate {remove_field => "uniqueVul"}
	 mutate {rename => {"[fingerprint]" => "[uniqueVul]"}}

	#Suche ob in der Datenbank schon der unique identifier ist
	jdbc_streaming
      {
         jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.8.jar"
          jdbc_driver_class => "org.postgresql.Driver"
          jdbc_connection_string => "jdbc:postgresql://db:5432/${POSTGRES_DB}"
          jdbc_user => "${POSTGRES_USER}"
          jdbc_password => "${POSTGRES_PASSWORD}"
          statement => "SELECT * from uniquevulns WHERE uniqueidentifier LIKE :identifier"
          parameters => { "identifier" => "uniqueVul" }
          target => "uniqueIdentifierTarget"
          use_cache => true
		  tag_on_failure => ["_uniqueIdentifierNotExist"]
		  #add_field => { "[uniqueIdFromDB]" => "%{[uniqueIdentifierTarget][0][uniqueidentifier]}"}
      }
# Feld ist leer also isUnique als elasticObject anlegen
	#if[uniqueIdFromDB] { mutate { add_field => { "[isUnique]" => "false" } }}
	if [uniqueIdentifierTarget][0][uniqueidentifier] == [uniqueVul]  { mutate { add_field => { "[isUnique]" => false }}}
	else { mutate { add_field => { "[isUnique]" => true }} }
	mutate { convert => { "isUnique" => "boolean" }}
	#mutate { remove_field => [uniqueIdentifierTarget]}

      # Classify assets by subnet
      # {! PLACEHOLDER CIDR !}

      # Classify asset by ip to type
      # {! PLACEHOLDER IP !}

    #} # close if tags openvas #not needed in filebeat



} # close filter
