filter {
  if[fields][event][type] == "suricata" {
    mutate {
      rename => {
        "[fields][event][type]" => "[event][type]"
        "[agent][hostname]" => "[event][host]"
      }
    }
    json {
      skip_on_invalid_json => true
      source => "message"
    }
  if "_jsonparsefailure" not in [tags] {
    if [event_type] {
      mutate {
        rename => {"[event_type]" => "[event][subtype]"}
      }
    }
    if [timestamp]
    {
        date {
            match => ["timestamp", "ISO8601"]
            target => "@timestamp"
        }
    }
    if[proto] {
      mutate {
        rename => {"proto" => "[network][transport]"}
      }
      if [network][transport] == "TCP" {
        if [src_port] {
          translate {
            dictionary_path => "/etc/logstash/BOX4s/services-tcp.yaml"
            field => "[src_port]"
            destination => "[source][port][name]"
            fallback => "%{src_port}"
          }
          mutate {
            rename => {"src_port" => "[source][port][number]"}
          }
        }
        if [dest_port] {
          translate {
            dictionary_path => "/etc/logstash/BOX4s/services-tcp.yaml"
            field => "[dest_port]"
            destination => "[destination][port][name]"
            fallback => "%{dest_port}"
          }
          mutate {
            rename => {"dest_port" => "[destination][port][number]"}
          }
        }
      } else if [network][transport] == "UDP" {
        if [src_port] {
          translate {
            dictionary_path => "/etc/logstash/BOX4s/services-udp.yaml"
            field => "[src_port]"
            destination => "[source][port][name]"
            fallback => "%{src_port}"
          }
          mutate {
            rename => {"src_port" => "[source][port][number]"}
          }
        }
        if [dest_port] {
          translate {
            dictionary_path => "/etc/logstash/BOX4s/services-udp.yaml"
            field => "[dest_port]"
            destination => "[destination][port][name]"
            fallback => "%{dest_port}"
          }
          mutate {
            rename => {"dest_port" => "[destination][port][number]"}
          }
        }
      }
      mutate {
        convert => {
          "[destination][port][number]" => "integer"
          "[source][port][number]" => "integer"
        }
      }
      if [destination][port][name] {
        mutate {
          replace => {"[destination][port][name]" => "%{[destination][port][number]} - %{[destination][port][name]}"}
        }
      } else {
        mutate {
          replace => {"[destination][port][name]" => "%{[destination][port][number]}"}
        }
      }
      if [source][port][name] {
        mutate {
          replace => {"[source][port][name]" => "%{[source][port][number]} - %{[source][port][name]}"}
        }
      } else {
        mutate {
          replace => {"[source][port][name]" => "%{[source][port][number]}"}
        }
      }
    }
    if[app_proto]{
      mutate{
        rename => {"app_proto" => "[network][protocol]"}
      }
    }
    if ![event][subtype] and [alert][signature_id] {
      mutate {
        add_field => { "[event][subtype]" => "alert"}
      }
    }
    if [src_ip] {
      cidr {
        address => ["%{src_ip}"]
        network => ["0.0.0.0/0"]
        add_field => {
          "[network][type]" => "IPv4"
        }
      }
      if ![network][type] {
        cidr {
          address => ["%{src_ip}"]
          network => ["::/0"]
          add_field => {
            "[network][type]" => "IPv6"
          }
        }
      }
    }
    else if ![network][type] and [dest_ip] {
      cidr {
        address => ["%{dest_ip}"]
        network => ["0.0.0.0/0"]
        add_field => {
          "[network][type]" => "IPv4"
        }
      }
      if ![network][type] {
        cidr {
          address => ["%{dest_ip}"]
          network => ["::/0"]
          add_field => {
            "[network][type]" => "IPv6"
          }
        }
      }
    }
    if[network][type] == "IPv6" {
      if[src_ip] {
        ruby {
          init => "require 'ipaddr'"
          code => "
                  ip6obj = IPAddr.new(event.get('[src_ip]'))
                  event.set('[src_ip]', ip6obj.to_string)
                  "
        }
      }
      if[dest_ip] {
        ruby {
          init => "require 'ipaddr'"
          code => "
                  ip6obj = IPAddr.new(event.get('[dest_ip]'))
                  event.set('[dest_ip]', ip6obj.to_string)
                  "
        }
      }
    }
    if[src_ip] {
      mutate {
        add_field => { "[network][direction]" => "internal" }
      }
      if[src_ip] == "127.0.0.1" {
        #TODO
      } else {
        mutate {
          replace => {"[source][domain]" => "%{[src_ip]}"}
        }
        dns {
          reverse => ["[source][domain]"]
          action => "replace"
        }
      }
      cidr {
        address => ["%{[src_ip]}"]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
        add_field => {"[source][as][organization][name]" => "private"}
      }
      if ![source][as][organization][name] {
        mutate { replace => {"[network][direction]" => "inbound"} }
     jdbc_streaming
      {
          jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.8.jar"
          jdbc_driver_class => "org.postgresql.Driver"
          jdbc_connection_string => "jdbc:postgresql://db:5432/${POSTGRES_DB}"
          jdbc_user => "${POSTGRES_USER}"
          jdbc_password => "${POSTGRES_PASSWORD}"
          cache_expiration => "400"
          cache_size => "5000"
          statement => "SELECT AS_number, AS_description from asn WHERE range_start <= :ip and range_end >= :ip"
          parameters => { "ip" => "[src_ip]"}
          target => "servers"
          use_cache => true
          add_field => { "[source][as][number]" => "%{[servers][0][as_number]}" }
          add_field => { "[source][as][organization][name]" => "%{[servers][0][as_description]}" }
          remove_field => "servers"
      }
      if "as_description" in "[source][as][organization][name]" {
        # Replacing with value from jdbc failed
        # Mutate => replace with public
       mutate {
        replace => {"[source][as][organization][name]" => "public"}
       }
      }
      if "as_number" in "[source][as][number]" {
        # Replacing with value from jdbc failed
        # Mutate => remove_fields and set to public as
        mutate {
          remove_field => ["[source][as][number]"]
          replace => {"[source][as][organization][name]" => "public"}
        }
      }
       if [network][type] == "IPv4" {
          ip2location {
            source => "src_ip"
            database => "/var/lib/box4s/IP2LOCATION-LITE-DB5.BIN"
            use_memory_mapped => true
          }
        }
          else if [network][type] == "IPv6" {
          ip2location {
            source => "src_ip"
            database => "/var/lib/box4s/IP2LOCATION-LITE-DB5.IPV6.BIN"
            use_memory_mapped => true
          }
          }
        if [ip2location] {
          mutate {
            rename => {"[ip2location]" => "[source][geo]"}
          }
          mutate {
            rename => {"[source][geo][latitude]" => "[source][geo][location][lat]"}
            rename => {"[source][geo][longitude]" => "[source][geo][location][lon]"}
          }
        }
     }
      mutate {
        rename => {"src_ip" => "[source][ip]"}
      }
    }


    if[dest_ip] {
      if[dest_ip] == "127.0.0.1" {
        #TODO
      } else {
        mutate {
          replace => {"[destination][domain]" => "%{[dest_ip]}"}
        }
        dns {
          reverse => ["[destination][domain]"]
          action => "replace"
        }
      }
      cidr {
        address => ["%{[dest_ip]}"]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
        add_field => {"[destination][as][organization][name]" => "private"}
      }
      if ![destination][as][organization][name] {
#ASN Infos
     jdbc_streaming
      {
          jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.8.jar"
          jdbc_driver_class => "org.postgresql.Driver"
          jdbc_connection_string => "jdbc:postgresql://db:5432/${POSTGRES_DB}"
          jdbc_user => "${POSTGRES_USER}"
          jdbc_password => "${POSTGRES_PASSWORD}"
          cache_expiration => "400"
          cache_size => "5000"
          statement => "SELECT AS_number, AS_description from asn WHERE range_start <= :ip and range_end >= :ip"
          parameters => { "ip" => "[dest_ip]"}
          target => "servers"
          use_cache => true
          add_field => { "[destination][as][number]" => "%{[servers][0][as_number]}" }
          add_field => { "[destination][as][organization][name]" => "%{[servers][0][as_description]}" }
          remove_field => "servers"
     }
     if "as_description" in "[destination][as][organization][name]" {
        # Replacing with value from jdbc failed
        # Mutate => replace with public
       mutate {
        replace => {"[destination][as][organization][name]" => "public"}
       }
      }
      if "as_number" in "[destination][as][number]" {
        # Replacing with value from jdbc failed
        # Mutate => remove_fields and set to public as
        mutate {
          remove_field => ["[destination][as][number]"]
          replace => {"[destination][as][organization][name]" => "public"}
        }
      }
   #  Location Infos
      if [network][type] == "IPv4" {
          ip2location {
            source => "dest_ip"
            database => "/var/lib/box4s/IP2LOCATION-LITE-DB5.BIN"
            use_memory_mapped => true
          }
        }
        else if [network][type] == "IPv6" {
          ip2location {
            source => "dest_ip"
            database => "/var/lib/box4s/IP2LOCATION-LITE-DB5.IPV6.BIN"
            use_memory_mapped => true
           }
          }
          if [ip2location] {
          mutate {
            rename => {"[ip2location]" => "[destination][geo]"}
          }
          mutate {
            rename => {"[destination][geo][latitude]" => "[destination][geo][location][lat]"}
            rename => {"[destination][geo][longitude]" => "[destination][geo][location][lon]"}
          }
        }
       }
      mutate {
        rename => {"dest_ip" => "[destination][ip]"}
      }
    }
    if [destination][as][organization][name] == "private" {
      if [source][as][organization][name] == "private" {
        # internal dest, internal source
        mutate {
          replace => {"[network][direction]" => "internal"}
        }
      } else {
        # internal dest, external source
        mutate {
          replace => {"[network][direction]" => "inbound"}
        }
      }
    } else {
      if [source][as][organization][name] == "private" {
        # external dest, internal source
        mutate {
          replace => {"[network][direction]" => "outbound"}
        }
      } else {
        # external dest, external source
        mutate {
          replace => {"[network][direction]" => "external"}
        }
      }
    }
    if [tcp][tcp_flags] {
      ruby {
        code => '
          flags = []
          flags << "ACK" if event.get("[tcp][ack]")
          flags << "CWR" if event.get("[tcp][cwr]")
          flags << "ECE" if event.get("[tcp][ece]")
          flags << "FIN" if event.get("[tcp][fin]")
          flags << "PSH" if event.get("[tcp][psh]")
          flags << "RST" if event.get("[tcp][rst]")
          flags << "SYN" if event.get("[tcp][syn]")
          flags << "URG" if event.get("[tcp][urg]")
          event.set("[tcp][flags]", flags)
        '
      }
      mutate {
        remove_field => [ "[tcp][ack]", "[tcp][cwr]", "[tcp][ece]", "[tcp][fin]", "[tcp][psh]", "[tcp][rst]", "[tcp][syn]", "[tcp][urg]" ]
      }
    }
    if [icmp_type] {
      if[network][type] == "IPv4" {
        translate {
          dictionary_path => "/etc/logstash/BOX4s/icmp-type.yaml"
          field => [icmp_type]
          fallback => "Unassigned - %{icmp_type}"
          destination => "[icmp][type]"
        }
      } else if [network][type] == "IPv6" {
        translate {
          dictionary_path => "/etc/logstash/BOX4s/icmpv6-type.yaml"
          field => [icmp_type]
          fallback => "Unassigned - %{icmp_type}"
          destination => "[icmp][type]"
        }
      }
      if [icmp_code] {
        mutate {
          add_field => {"[icmp][_lookup]" => "%{[icmp_type]}.%{[icmp_code]}"}
        }
        if[network][type] == "IPv4" {
          translate {
            dictionary_path => "/etc/logstash/BOX4s/icmp-codes.yaml"
            field => "[icmp][_lookup]"
            fallback => "Unassigned - %{icmp_code}"
            destination => "[icmp][code]"
          }
        } else if [network][type] == "IPv6" {
          translate {
            dictionary_path => "/etc/logstash/BOX4s/icmpv6-codes.yaml"
            field => "[icmp][_lookup]"
            fallback => "Unassigned - %{icmp_code}"
            destination => "[icmp][code]"
          }
        }
        mutate {
          add_field => {"[icmp][method]" => "request"}
        }
      }
    }
    if [response_icmp_type] {
      mutate {
        add_field => {"[icmp][method]" => "response"}
      }
      if[network][type] == "IPv4" {
        translate {
          dictionary_path => "/etc/logstash/BOX4s/icmp-type.yaml"
          field => [icmp_type]
          fallback => "Unassigned - %{response_icmp_type}"
          destination => "[icmp][response][type]"
        }
      } else if [network][type] == "IPv6" {
        translate {
          dictionary_path => "/etc/logstash/BOX4s/icmpv6-type.yaml"
          field => [icmp_type]
          fallback => "Unassigned - %{response_icmp_type}"
          destination => "[icmp][response][type]"
        }
      }
      if [response_icmp_code] {
        mutate {
          add_field => {"[icmp][_lookup]" => "%{[response_icmp_type]}.%{[response_icmp_code]}"}
        }
        if[network][type] == "IPv4" {
          translate {
            dictionary_path => "/etc/logstash/BOX4s/icmp-codes.yaml"
            field => "[icmp][_lookup]"
            fallback => "Unassigned - %{response_icmp_code}"
            destination => "[icmp][response][code]"
          }
        } else if [network][type] == "IPv6" {
          translate {
            dictionary_path => "/etc/logstash/BOX4s/icmpv6-codes.yaml"
            field => "[icmp][_lookup]"
            fallback => "Unassigned - %{response_icmp_code}"
            destination => "[icmp][response][code]"
          }
        }
      }
    }
    if [alert][severity] {
      translate {
        field => "[alert][severity]"
        destination => "[log][severity]"
        dictionary => {
          "1" => "informativ"
          "2" => "gering"
          "3" => "mittel"
          "4" => "hoch"
          "5" => "sehr_hoch"
        }
        fallback => "informativ"
      }
      translate {
        field => "[alert][severity]"
        destination => "[alert][severity]"
        dictionary => {
          "1" => "5"
          "2" => "4"
          "3" => "3"
          "4" => "2"
          "5" => "1"
        }
        fallback => "1"
      }
    } else {
      mutate {
        add_field => {"[log][severity]" => "system"}
      }
    }
    # source https://qbox.io/blog/extract-index-details-user-agent-header-value-elasticsearch-5-0
    if [http][http_user_agent] {
      useragent {
        lru_cache_size => 3000
        source => "[http][http_user_agent]"
        target => "[http][_useragent]"
      }
      mutate {
        rename => {"[http][http_user_agent]" => "[http][user_agent][original]"}
      }
      if [http][_useragent][name] {
        mutate {
          add_field => { "[http][user_agent][name]" => "%{[http][_useragent][name]}" }
        }
      }
      if [http][_useragent][major] {
        mutate {
          add_field => { "[http][user_agent][version]" => "%{[http][_useragent][major]}" }
        }
        if [http][_useragent][minor] {
          mutate {
            replace => { "[http][user_agent][version]" => "%{[http][user_agent][version]}.%{[http][_useragent][minor]}" }
          }
          if [http][_useragent][patch] {
            mutate {
              replace => { "[http][user_agent][version]" => "%{[http][user_agent][version]}.%{[http][_useragent][patch]}" }
            }
          }
        }
      }
      if [http][_useragent][device] {
        mutate {
          add_field => {"[http][user_agent][device][name]" => "%{[http][_useragent][device]}"}
        }
      }
      if [http][_useragent][os] {
        mutate {
          add_field => {"[http][user_agent][os][full]" => "%{[http][_useragent][os]}"}
        }
      }
      if [http][_useragent][os_name] {
        mutate {
          add_field => {"[http][user_agent][os][name]" => "%{[http][_useragent][os_name]}"}
        }
      }
      if [http][_useragent][os_major] {
        mutate {
          add_field => {"[http][user_agent][os][version]" => "%{[http][_useragent][os_major]}"}
        }
        if [http][_useragent][os_minor] {
          mutate {
            add_field => {"[http][user_agent][os][version]" => "%{[http][user_agent][os][version]}.%{[http][_useragent][os][os_minor]}"}
          }
        }
      }
    }
    if [event][subtype] == "http" {
      mutate {
        add_field => {"[url][scheme]" => "http"}
      }
      if [http][http_method] {
        mutate {
          rename => {"[http][http_method]" => "[http][request][method]"}
        }
      }
      if [http][length]
      {
        mutate {
          add_field => {"[http][request][body][bytes]" => "%{[http][length]}"}
        }
      }
      if [http][protocol] {
        grok {
          match => { "[http][protocol]" => "(?<[http][version]>[\d]+\.?[\d]*)"}
        }
      }
      if [http][http_content_type] {
        mutate {
          rename => { "[http][http_content_type]" => "[http][content_type]"}
        }
      }
      if [http][hostname] {
        mutate {
          add_field => {"[url][domain]" => "%{[http][hostname]}"}
        }
      }
      if [http][url]{
        mutate {
          add_field => {"[url][path]" => "%{[http][url]}"}
        }
      }
      mutate {
        remove_field => ["[http][url]", "[http][protocol]", "[http][hostname]", "[http][length]", "[http][_useragent]", "[http][http_user_agent]"]
      }
    }
    if [event][subtype] == "dns" {
      if [dns][type] == "answer" {
        if [dns][rcode] {
          mutate {
            rename => {"[dns][rcode]" => "[dns][response_code]"}
          }
        }
        if [dns][rrname] {
          mutate {
            rename => {"[dns][rrname]" => "[dns][answer][name]"}
          }
        }
      } else if [dns][type] == "query" {
        if [dns][tx_id] {
          mutate {
            rename => {"[dns][tx_id]" => "[dns][transaction_id]"}
          }
        }
        if [dns][rrtype] {
          mutate {
            rename => {"[dns][rrtype]" => "[dns][question][type]"}
          }
        }
        if [dns][rrname] {
          mutate {
            rename => {"[dns][rrname]" => "[dns][question][name]"}
          }
        }
      }
    }
    if [flow][bytes_toclient] {
      if [flow][bytes_toserver] {
        ruby {
          code => "
            event.set( '[network][bytes]', event.get('[flow][bytes_toclient]').to_i + event.get('[flow][bytes_toserver]').to_i )
          "
        }
      } else {
        mutate {
          replace => { "[network][bytes]" => "%{[flow][bytes_toclient]}" }
        }
      }
    } else if [flow][bytes_toserver] {
      mutate {
        replace => { "[network][bytes]" => "%{[flow][bytes_toserver]}" }
      }
    }
    if [network][bytes] {
      mutate {
        convert => { "[network][bytes]" => "integer" }
      }
    }
    if [flow][pkts_toclient] {
      if [flow][pkts_toserver] {
        ruby {
          code => "
            event.set( '[network][packets]', event.get('[flow][pkts_toclient]').to_i + event.get('[flow][pkts_toserver]').to_i )
          "
        }
      } else {
        mutate {
          replace => { "[network][packets]" => "%{[flow][pkts_toclient]}" }
        }
      }
    } else if [flow][pkts_toserver] {
      mutate {
        replace => { "[network][packets]" => "%{[flow][pkts_toserver]}" }
      }
    }
    if [network][packets] {
      mutate {
        convert => { "[network][packets]" => "integer" }
      }
    }
    mutate {
      remove_tag => ["beats_input_codec_plain_applied"]
      remove_field => ["[log][file][path]", "[log][offset]","in_iface", "agent", "message", "response_icmp_type", "response_icmp_code","icmp_type", "icmp_code", "[icmp][_lookup]"]
    }
    # Determine Server/Client
    if[source][port][number] and [destination][port][number]
    {
      if [source][port][number] >= [destination][port][number]
      {
        mutate {
          copy => {"[destination]" => "[server]"}
          copy => {"[source]" => "[client]"}
        }
        } else {
          mutate {
            copy => {"[source]" => "[server]"}
            copy => {"[destination]" => "[client]"}
          }
      }
    }

if [event][subtype] == "alert" {
  # Add link to Alerting web page
  mutate {
    add_field => { "[link_alert]" => "${INT_IP}/alerts"}
  }
  # Add link to filtering web page
  mutate {
    add_field => {"[link_suppress]" => "${INT_IP}/filter?create=1&src_ip=%{[source][ip]}&src_port=%{[source][port][number]}&dst_ip=%{[destination][ip]}&dst_port=%{[destination][port][number]}&proto=%{[network][transport]}&signature_id=%{[alert][signature_id]}&signature=%{[alert][signature]}" }
  }
  } else {
  mutate {
	   add_field => {"[link_suppress]" => "${INT_IP}/filter?create=1&src_ip=%{[source][ip]}&src_port=%{[source][port][number]}&dst_ip=%{[destination][ip]}&dst_port=%{[destination][port][number]}&proto=%{[network][transport]}" }
   }
  }
 }
}
}
